/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.arthurchan35.wcse.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.arthurchan35.wcse.model.Words;
import com.arthurchan35.wcse.model.WordsModel;
import com.arthurchan35.wcse.model.WordsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Words service. Represents a row in the &quot;UrlStorage_Words&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WordsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WordsImpl}.
 * </p>
 *
 * @author Arthur Chan
 * @see WordsImpl
 * @see Words
 * @see WordsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WordsModelImpl extends BaseModelImpl<Words> implements WordsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a words model instance should use the {@link Words} interface instead.
	 */
	public static final String TABLE_NAME = "UrlStorage_Words";
	public static final Object[][] TABLE_COLUMNS = {
			{ "word_id", Types.BIGINT },
			{ "url_id", Types.BIGINT },
			{ "word", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("word_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("word", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table UrlStorage_Words (word_id LONG not null primary key,url_id LONG,word VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table UrlStorage_Words";
	public static final String ORDER_BY_JPQL = " ORDER BY words.word_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UrlStorage_Words.word_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.example.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.arthurchan35.wcse.model.Words"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.example.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.arthurchan35.wcse.model.Words"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Words toModel(WordsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Words model = new WordsImpl();

		model.setWord_id(soapModel.getWord_id());
		model.setUrl_id(soapModel.getUrl_id());
		model.setWord(soapModel.getWord());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Words> toModels(WordsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Words> models = new ArrayList<Words>(soapModels.length);

		for (WordsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_URLSTORAGE_PAGES_WORDS_NAME = "UrlStorage_Pages_Words";
	public static final Object[][] MAPPING_TABLE_URLSTORAGE_PAGES_WORDS_COLUMNS = {
			{ "companyId", Types.BIGINT },
			{ "url_id", Types.BIGINT },
			{ "word_id", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_URLSTORAGE_PAGES_WORDS_SQL_CREATE = "create table UrlStorage_Pages_Words (companyId LONG not null,url_id LONG not null,word_id LONG not null,primary key (url_id, word_id))";
	public static final boolean FINDER_CACHE_ENABLED_URLSTORAGE_PAGES_WORDS = GetterUtil.getBoolean(com.example.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.UrlStorage_Pages_Words"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.example.service.util.PropsUtil.get(
				"lock.expiration.time.com.arthurchan35.wcse.model.Words"));

	public WordsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _word_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWord_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _word_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Words.class;
	}

	@Override
	public String getModelClassName() {
		return Words.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("word_id", getWord_id());
		attributes.put("url_id", getUrl_id());
		attributes.put("word", getWord());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long word_id = (Long)attributes.get("word_id");

		if (word_id != null) {
			setWord_id(word_id);
		}

		Long url_id = (Long)attributes.get("url_id");

		if (url_id != null) {
			setUrl_id(url_id);
		}

		String word = (String)attributes.get("word");

		if (word != null) {
			setWord(word);
		}
	}

	@JSON
	@Override
	public long getWord_id() {
		return _word_id;
	}

	@Override
	public void setWord_id(long word_id) {
		_word_id = word_id;
	}

	@JSON
	@Override
	public long getUrl_id() {
		return _url_id;
	}

	@Override
	public void setUrl_id(long url_id) {
		_url_id = url_id;
	}

	@JSON
	@Override
	public String getWord() {
		if (_word == null) {
			return StringPool.BLANK;
		}
		else {
			return _word;
		}
	}

	@Override
	public void setWord(String word) {
		_word = word;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Words.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Words toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Words)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WordsImpl wordsImpl = new WordsImpl();

		wordsImpl.setWord_id(getWord_id());
		wordsImpl.setUrl_id((Pages)getUrl_id().clone());
		wordsImpl.setWord(getWord());

		wordsImpl.resetOriginalValues();

		return wordsImpl;
	}

	@Override
	public int compareTo(Words words) {
		long primaryKey = words.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Words)) {
			return false;
		}

		Words words = (Words)obj;

		long primaryKey = words.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Words> toCacheModel() {
		WordsCacheModel wordsCacheModel = new WordsCacheModel();

		wordsCacheModel.word_id = getWord_id();

		wordsCacheModel.url_id = getUrl_id();

		wordsCacheModel.word = getWord();

		String word = wordsCacheModel.word;

		if ((word != null) && (word.length() == 0)) {
			wordsCacheModel.word = null;
		}

		return wordsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{word_id=");
		sb.append(getWord_id());
		sb.append(", url_id=");
		sb.append(getUrl_id());
		sb.append(", word=");
		sb.append(getWord());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.arthurchan35.wcse.model.Words");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>word_id</column-name><column-value><![CDATA[");
		sb.append(getWord_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url_id</column-name><column-value><![CDATA[");
		sb.append(getUrl_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>word</column-name><column-value><![CDATA[");
		sb.append(getWord());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Words.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Words.class
		};
	private long _word_id;
	private long _url_id;
	private String _word;
	private Words _escapedModel;
}