/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.arthurchan35.wcse.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.arthurchan35.wcse.model.Pages;
import com.arthurchan35.wcse.model.PagesModel;
import com.arthurchan35.wcse.model.PagesSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Pages service. Represents a row in the &quot;UrlStorage_Pages&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PagesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PagesImpl}.
 * </p>
 *
 * @author Arthur Chan
 * @see PagesImpl
 * @see Pages
 * @see PagesModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PagesModelImpl extends BaseModelImpl<Pages> implements PagesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pages model instance should use the {@link Pages} interface instead.
	 */
	public static final String TABLE_NAME = "UrlStorage_Pages";
	public static final Object[][] TABLE_COLUMNS = {
			{ "url_id", Types.BIGINT },
			{ "url", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "image", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("url_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table UrlStorage_Pages (url_id LONG not null primary key,url VARCHAR(75) null,description VARCHAR(75) null,image VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table UrlStorage_Pages";
	public static final String ORDER_BY_JPQL = " ORDER BY pages.url_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UrlStorage_Pages.url_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.example.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.arthurchan35.wcse.model.Pages"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.example.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.arthurchan35.wcse.model.Pages"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Pages toModel(PagesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Pages model = new PagesImpl();

		model.setUrl_id(soapModel.getUrl_id());
		model.setUrl(soapModel.getUrl());
		model.setDescription(soapModel.getDescription());
		model.setImage(soapModel.getImage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Pages> toModels(PagesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Pages> models = new ArrayList<Pages>(soapModels.length);

		for (PagesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_URLSTORAGE_PAGES_WORDS_NAME = "UrlStorage_Pages_Words";
	public static final Object[][] MAPPING_TABLE_URLSTORAGE_PAGES_WORDS_COLUMNS = {
			{ "companyId", Types.BIGINT },
			{ "url_id", Types.BIGINT },
			{ "word_id", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_URLSTORAGE_PAGES_WORDS_SQL_CREATE = "create table UrlStorage_Pages_Words (companyId LONG not null,url_id LONG not null,word_id LONG not null,primary key (url_id, word_id))";
	public static final boolean FINDER_CACHE_ENABLED_URLSTORAGE_PAGES_WORDS = GetterUtil.getBoolean(com.example.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.UrlStorage_Pages_Words"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.example.service.util.PropsUtil.get(
				"lock.expiration.time.com.arthurchan35.wcse.model.Pages"));

	public PagesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _url_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUrl_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _url_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Pages.class;
	}

	@Override
	public String getModelClassName() {
		return Pages.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("url_id", getUrl_id());
		attributes.put("url", getUrl());
		attributes.put("description", getDescription());
		attributes.put("image", getImage());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long url_id = (Long)attributes.get("url_id");

		if (url_id != null) {
			setUrl_id(url_id);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}
	}

	@JSON
	@Override
	public long getUrl_id() {
		return _url_id;
	}

	@Override
	public void setUrl_id(long url_id) {
		_url_id = url_id;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Pages.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Pages toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Pages)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PagesImpl pagesImpl = new PagesImpl();

		pagesImpl.setUrl_id((Words)getUrl_id().clone());
		pagesImpl.setUrl(getUrl());
		pagesImpl.setDescription(getDescription());
		pagesImpl.setImage(getImage());

		pagesImpl.resetOriginalValues();

		return pagesImpl;
	}

	@Override
	public int compareTo(Pages pages) {
		long primaryKey = pages.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Pages)) {
			return false;
		}

		Pages pages = (Pages)obj;

		long primaryKey = pages.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Pages> toCacheModel() {
		PagesCacheModel pagesCacheModel = new PagesCacheModel();

		pagesCacheModel.url_id = getUrl_id();

		pagesCacheModel.url = getUrl();

		String url = pagesCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			pagesCacheModel.url = null;
		}

		pagesCacheModel.description = getDescription();

		String description = pagesCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			pagesCacheModel.description = null;
		}

		pagesCacheModel.image = getImage();

		String image = pagesCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			pagesCacheModel.image = null;
		}

		return pagesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{url_id=");
		sb.append(getUrl_id());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", image=");
		sb.append(getImage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.arthurchan35.wcse.model.Pages");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>url_id</column-name><column-value><![CDATA[");
		sb.append(getUrl_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Pages.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Pages.class
		};
	private long _url_id;
	private String _url;
	private String _description;
	private String _image;
	private Pages _escapedModel;
}