/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.arthurchan35.wcse.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.arthurchan35.wcse.model.Page;
import com.arthurchan35.wcse.model.PageImageBlobModel;
import com.arthurchan35.wcse.model.PageModel;
import com.arthurchan35.wcse.model.PageSoap;
import com.arthurchan35.wcse.service.PageLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Page service. Represents a row in the &quot;PagesStorage_Page&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PageImpl}.
 * </p>
 *
 * @author Arthur Chan
 * @see PageImpl
 * @see Page
 * @see PageModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PageModelImpl extends BaseModelImpl<Page> implements PageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a page model instance should use the {@link Page} interface instead.
	 */
	public static final String TABLE_NAME = "PagesStorage_Page";
	public static final Object[][] TABLE_COLUMNS = {
			{ "pageId", Types.BIGINT },
			{ "url", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "image", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("pageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table PagesStorage_Page (pageId LONG not null primary key,url VARCHAR(75) null,description VARCHAR(75) null,image BLOB)";
	public static final String TABLE_SQL_DROP = "drop table PagesStorage_Page";
	public static final String ORDER_BY_JPQL = " ORDER BY page.pageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PagesStorage_Page.pageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.arthurchan35.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.arthurchan35.wcse.model.Page"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.arthurchan35.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.arthurchan35.wcse.model.Page"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.arthurchan35.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.arthurchan35.wcse.model.Page"),
			true);
	public static final long URL_COLUMN_BITMASK = 1L;
	public static final long PAGEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Page toModel(PageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Page model = new PageImpl();

		model.setPageId(soapModel.getPageId());
		model.setUrl(soapModel.getUrl());
		model.setDescription(soapModel.getDescription());
		model.setImage(soapModel.getImage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Page> toModels(PageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Page> models = new ArrayList<Page>(soapModels.length);

		for (PageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.arthurchan35.service.util.PropsUtil.get(
				"lock.expiration.time.com.arthurchan35.wcse.model.Page"));

	public PageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Page.class;
	}

	@Override
	public String getModelClassName() {
		return Page.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("pageId", getPageId());
		attributes.put("url", getUrl());
		attributes.put("description", getDescription());
		attributes.put("image", getImage());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long pageId = (Long)attributes.get("pageId");

		if (pageId != null) {
			setPageId(pageId);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Blob image = (Blob)attributes.get("image");

		if (image != null) {
			setImage(image);
		}
	}

	@JSON
	@Override
	public long getPageId() {
		return _pageId;
	}

	@Override
	public void setPageId(long pageId) {
		_pageId = pageId;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_columnBitmask |= URL_COLUMN_BITMASK;

		if (_originalUrl == null) {
			_originalUrl = _url;
		}

		_url = url;
	}

	public String getOriginalUrl() {
		return GetterUtil.getString(_originalUrl);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Blob getImage() {
		if (_imageBlobModel == null) {
			try {
				_imageBlobModel = PageLocalServiceUtil.getImageBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_imageBlobModel != null) {
			blob = _imageBlobModel.getImageBlob();
		}

		return blob;
	}

	@Override
	public void setImage(Blob image) {
		if (_imageBlobModel == null) {
			_imageBlobModel = new PageImageBlobModel(getPrimaryKey(), image);
		}
		else {
			_imageBlobModel.setImageBlob(image);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Page.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Page toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Page)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PageImpl pageImpl = new PageImpl();

		pageImpl.setPageId(getPageId());
		pageImpl.setUrl(getUrl());
		pageImpl.setDescription(getDescription());

		pageImpl.resetOriginalValues();

		return pageImpl;
	}

	@Override
	public int compareTo(Page page) {
		long primaryKey = page.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Page)) {
			return false;
		}

		Page page = (Page)obj;

		long primaryKey = page.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PageModelImpl pageModelImpl = this;

		pageModelImpl._originalUrl = pageModelImpl._url;

		pageModelImpl._imageBlobModel = null;

		pageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Page> toCacheModel() {
		PageCacheModel pageCacheModel = new PageCacheModel();

		pageCacheModel.pageId = getPageId();

		pageCacheModel.url = getUrl();

		String url = pageCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			pageCacheModel.url = null;
		}

		pageCacheModel.description = getDescription();

		String description = pageCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			pageCacheModel.description = null;
		}

		return pageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{pageId=");
		sb.append(getPageId());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", description=");
		sb.append(getDescription());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.arthurchan35.wcse.model.Page");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>pageId</column-name><column-value><![CDATA[");
		sb.append(getPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Page.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Page.class
		};
	private long _pageId;
	private String _url;
	private String _originalUrl;
	private String _description;
	private PageImageBlobModel _imageBlobModel;
	private long _columnBitmask;
	private Page _escapedModel;
}