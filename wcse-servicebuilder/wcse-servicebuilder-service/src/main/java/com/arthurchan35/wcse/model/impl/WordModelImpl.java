/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.arthurchan35.wcse.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.arthurchan35.wcse.model.Word;
import com.arthurchan35.wcse.model.WordModel;
import com.arthurchan35.wcse.model.WordSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Word service. Represents a row in the &quot;PagesStorage_Word&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WordImpl}.
 * </p>
 *
 * @author Arthur Chan
 * @see WordImpl
 * @see Word
 * @see WordModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WordModelImpl extends BaseModelImpl<Word> implements WordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a word model instance should use the {@link Word} interface instead.
	 */
	public static final String TABLE_NAME = "PagesStorage_Word";
	public static final Object[][] TABLE_COLUMNS = {
			{ "wordId", Types.BIGINT },
			{ "pageId", Types.BIGINT },
			{ "word", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("wordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("word", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table PagesStorage_Word (wordId LONG not null primary key,pageId LONG,word VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PagesStorage_Word";
	public static final String ORDER_BY_JPQL = " ORDER BY word.wordId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PagesStorage_Word.wordId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.arthurchan35.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.arthurchan35.wcse.model.Word"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.arthurchan35.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.arthurchan35.wcse.model.Word"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Word toModel(WordSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Word model = new WordImpl();

		model.setWordId(soapModel.getWordId());
		model.setPageId(soapModel.getPageId());
		model.setWord(soapModel.getWord());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Word> toModels(WordSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Word> models = new ArrayList<Word>(soapModels.length);

		for (WordSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.arthurchan35.service.util.PropsUtil.get(
				"lock.expiration.time.com.arthurchan35.wcse.model.Word"));

	public WordModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _wordId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWordId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _wordId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Word.class;
	}

	@Override
	public String getModelClassName() {
		return Word.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("wordId", getWordId());
		attributes.put("pageId", getPageId());
		attributes.put("word", getWord());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long wordId = (Long)attributes.get("wordId");

		if (wordId != null) {
			setWordId(wordId);
		}

		Long pageId = (Long)attributes.get("pageId");

		if (pageId != null) {
			setPageId(pageId);
		}

		String word = (String)attributes.get("word");

		if (word != null) {
			setWord(word);
		}
	}

	@JSON
	@Override
	public long getWordId() {
		return _wordId;
	}

	@Override
	public void setWordId(long wordId) {
		_wordId = wordId;
	}

	@JSON
	@Override
	public long getPageId() {
		return _pageId;
	}

	@Override
	public void setPageId(long pageId) {
		_pageId = pageId;
	}

	@JSON
	@Override
	public String getWord() {
		if (_word == null) {
			return StringPool.BLANK;
		}
		else {
			return _word;
		}
	}

	@Override
	public void setWord(String word) {
		_word = word;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Word.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Word toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Word)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WordImpl wordImpl = new WordImpl();

		wordImpl.setWordId(getWordId());
		wordImpl.setPageId(getPageId());
		wordImpl.setWord(getWord());

		wordImpl.resetOriginalValues();

		return wordImpl;
	}

	@Override
	public int compareTo(Word word) {
		long primaryKey = word.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Word)) {
			return false;
		}

		Word word = (Word)obj;

		long primaryKey = word.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Word> toCacheModel() {
		WordCacheModel wordCacheModel = new WordCacheModel();

		wordCacheModel.wordId = getWordId();

		wordCacheModel.pageId = getPageId();

		wordCacheModel.word = getWord();

		String word = wordCacheModel.word;

		if ((word != null) && (word.length() == 0)) {
			wordCacheModel.word = null;
		}

		return wordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{wordId=");
		sb.append(getWordId());
		sb.append(", pageId=");
		sb.append(getPageId());
		sb.append(", word=");
		sb.append(getWord());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.arthurchan35.wcse.model.Word");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>wordId</column-name><column-value><![CDATA[");
		sb.append(getWordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageId</column-name><column-value><![CDATA[");
		sb.append(getPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>word</column-name><column-value><![CDATA[");
		sb.append(getWord());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Word.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Word.class
		};
	private long _wordId;
	private long _pageId;
	private String _word;
	private Word _escapedModel;
}